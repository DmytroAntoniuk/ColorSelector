
class Body : Element
{
	function attached(){
		
		this.insert("<div #preview></div>",0);
		this.insert("<div #colorsContainer></div>",1);
		var container = $(#colorsContainer);
		container.insert("<div #noColorBlock><h2>No color</h2></div>",0);
		container.insert("<div #addColorBlock><h2>Add color</h2></div>",1);
		view.on("size", function() {
			const addColBlock = $(#addColorBlock);
			const isSmallEnough = addColBlock.box(#height) < 80;
			$(#colorsContainer).@#layout_type  = isSmallEnough ? "grid" : "line";
			stdout.$n(______________________LOG______________________{$(#colorsContainer).@#layout_type});
		});
	}	
}

class AddColorBlock : Element
{
     var blockColors = [];
	function attached(){
		stdout.$n(attachedAddColorBlock);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedAddColorBlock);
	}
	function handleClick(){
		var container = $(#colorsContainer);
	    container.insert("<div .colorBlock><span .closeBtn>&times;</span></div>",container.length - 1);
	    blockColors.push(color(rand(256),rand(256),rand(256)));
	    container[container.length - 2].style.set { background-color:  blockColors[blockColors.length - 1]};
	    const addColBlock = $(#addColorBlock);
			const isSmallEnough = addColBlock.box(#height) < 80;
			$(#colorsContainer).@#layout_type  = isSmallEnough ? "grid" : "line";
	}
}

class CloseButton : Element
{
	function attached(){
		stdout.$n(attachedClose);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedClose);
	}

	function handleClick(){
		const colorBlock = this.parent;
		colorBlock.remove();
	}
}

class ColorBlock : Element
{
	function attached(){
		stdout.$n(attachedColorBtn);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedColorBtn);
	}

	function handleClick(){

		const colorBlocks = $$(.colorBlock);
		for ( var block in colorBlocks){
			block.@#active = undefined;
		}
		this.@#active = true;
		
		
		const previewBlock = $(#preview);
		previewBlock.style#background-color = this.style#background-color;
	}
}

class NoColorBlock : Element
{
	function attached(){
		stdout.$n(attachedColorBtn);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedColorBtn);
	}

	function handleClick(){
		stdout.$n(clickColorBtn);
		const previewBlock = $(#preview);
		previewBlock.style.set { background-color : color("white")};
	}
}