include "colorSelector.tis";


class Body : Element
{

	function attached(){	
		var option = "";
		LayoutControl.generateLayout(option);
		view.on("size", function() {
			const addColBlock = $(#addColorBlock);
			const isSmallEnough = $(#colorsContainer).box(#width) < 650;
			$(#colorsContainer).@#layout_type  = isSmallEnough ? "grid" : "line";
		});
	}	
}


class AddColorBlock : Element
{
	function attached(){
		stdout.$n(attachedAddColorBlock);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedAddColorBlock);
	}

	function handleClick(){
		 $(#addColorBlock).popup($(#popupMenu), 2);
	}
}

class CloseButton : Element
{
	function attached(){
		stdout.$n(attachedClose);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedClose);
	}

	function handleClick(){
		const colorBlock = this.parent;
		colorBlock.@#toDelete = true; 
		var container = $(#colorsContainer);
		var i = 0;
		for (i = 0; i < container.length; i++) {
			if (container[i].@#toDelete == true) break;
		}
		blockColorsList.remove(i-1);
		// stdout.$n(______________________{i}__{blockColorsList.length}____________________);
		colorBlock.remove();
	}
}

class ColorBlock : Element
{
	function attached(){
		stdout.$n(attachedColorBtn);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedColorBtn);
	}

	function handleClick(){

		const colorBlocks = $$(.colorBlock);
		for ( var block in colorBlocks){
			block.@#active = undefined;
		}
		this.@#active = true;
		const previewBlock = $(#preview);
		previewBlock.style#background-color = this.style#background-color;
	}
}

class NoColorBlock : Element
{
	function attached(){
		stdout.$n(attachedColorBtn);
		this.onClick = handleClick;
	}

	function detached(){
		stdout.$n(detachedColorBtn);
	}

	function handleClick(){
		stdout.$n(clickColorBtn);
		const previewBlock = $(#preview);
		previewBlock.style.set { background-color : color("white")};
	}
}

