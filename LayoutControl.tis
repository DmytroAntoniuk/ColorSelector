class LayoutControl
{
    var blockColorsList = [];
    var elementCounter = 0;

    function generateLayout(needToAddColor){
      addNewColor(needToAddColor);
      generateBlocks();
  }

  function generateBlocks()
  {
    $(body).insert("<div #fileMenu></div>",0);
    $(#fileMenu).insert("<button #openFileBtn>Open file</button>",0);
    $(#fileMenu).insert("<br><button #saveFileBtn>Save file</button>",1);
    $(body).insert("<div #preview></div>",1);
    $(body).insert("<div #colorsContainer></div>",2);
    var container = $(#colorsContainer);
    container.insert("<div #noColorBlock><h2>No color</h2></div>",0);
    generateColorBlocks(container);
    container.insert("<div #addColorBlock><h2>Select color</h2></div>",container.length);
  }

  function generateColorBlocks(container)
  {
    var emptyBlock = "<div .colorBlock><div .closeBtn>&times;</div></div>";
    for ( var i = 0; i < blockColorsList.length ; i++) {
        container.insert(emptyBlock ,container.length);
        container[container.length-1].@#identifier = blockColorsList[i].id;
        container[container.length-1].@#active = blockColorsList[i].active;
        container[container.length-1].style#background-color = color(blockColorsList[i].color);      
        container[container.length-1].insert("<input .colorValueArea value="+blockColorsList[i].color+">",1);      
      }
  }

  function addNewColor(needToAddColor) {
    if (needToAddColor == true) 
    {
      const colorValue = $(widget#color).value.toString();
      var isDuplicated = blockColorsList.find(:el: el.color == colorValue); 
      if (!isDuplicated)
      {
        for (var block in blockColorsList)
        {
          if (block.active == true) block.active = false;
        }
        blockColorsList.push({
          id: elementCounter, 
          color: colorValue,
          active: true 
        });
        elementCounter++;       
      }
      removeLayout();
    }
  }

  function fillPreview(previewColor){
    const preview = $(#preview);
    preview.style#background-color = color(previewColor);
  }

  function removeLayout(){
    $(#fileMenu).remove();
    $(#preview).remove();
    $(#colorsContainer).remove();
  }

  function removeBlock(colorBlock)
  {
    colorBlock.@#toDelete = true; 
		var container = $(#colorsContainer);
		var i = 0;
		for (i = 0; i < container.length; i++) {
			if (container[i].@#toDelete == true) break;
		}
		LayoutControl.blockColorsList.remove(i-1);
		colorBlock.remove();
  }

  function clearBlockList(){
    blockColorsList = [];
  }

  function changePreviewColor(block){
		var list = LayoutControl.blockColorsList;
		const colorBlocks = $$(.colorBlock);
		for (var i = 0; i< list.length; i++)
    {
      if (list[i].active == true)
		  {
			  list[i].active = false;
			  colorBlocks[i].@#active = undefined;
			  break;
		  } 
    }

		for (var i = 0; i< list.length; i++)
		{
		  if (list[i].id == block.@#identifier)
		  {
			  list[i].active = true;
			  block.@#active = true;
			  break;
		  }
		}
		LayoutControl.fillPreview(block.style#background-color);
  }
}