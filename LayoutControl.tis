class LayoutController
{
  var instance;

  this var blockColorsList;
  this var elementCounter;

  function this(){
    stdout.$n(instance = {instance});
    if (typeof instance  == "object"){
      stdout.$n(NEW CONSTRUCTOR DIDN'T CALL);
      return instance; 
    }
    this.blockColorsList = [];
    this.elementCounter = 0;
    instance = this; 
    return instance;
  }

  function getInstance(){
    stdout.$n(instance = {instance});
    if (typeof instance  == "object"){
      stdout.$n(NEW CONSTRUCTOR DIDN'T CALL);
      return instance; 
    }
    this.blockColorsList = [];
    this.elementCounter = 0;
    instance = this; 
    return instance;
  }

  function getBlockColorsList(){
    return instance.blockColorsList;
  }

  property p_blockColorsList(val)
  {
    get return instance.blockColorsList;
  }

  property p_elementCounter(val)
  {
    get return instance.elementCounter; 
    set instance.elementCounter = val;  
  }

  function generateBlocks(){
    const body = $(body);
    const previewHTML = "<div #preview></div>";
    const previewSequenceNumber = 1;
    body.insert(previewHTML,previewSequenceNumber);
    const colorsContainerHTML = "<div #colorsContainer></div>";
    const colorsContainerSequenceNumber = 2
    body.insert(colorsContainerHTML,colorsContainerSequenceNumber);
    const container = $(#colorsContainer);
    const noColorBlockHTML =  "<div #noColorBlock><h2>No color</h2></div>";
    const noColorBlockSequenceNumber = 0;
    container.insert(noColorBlockHTML,noColorBlockSequenceNumber);
    generateColorBlocks(container);
    const addColorBlockHTML =  "<div #addColorBlock><h2>Select color</h2></div>";
    const addColorBlockSequenceNumber = container.length;
    container.insert(addColorBlockHTML,addColorBlockSequenceNumber);
  }

  function generateColorBlocks(container){
    var emptyBlock = "<div .colorBlock><div .closeBtn>&times;</div></div>";
    for ( var i = 0; i < (instance.blockColorsList.length); i++) {
        container.insert(emptyBlock ,container.length);
        const lastElementIndex = (container.length-1);
        container[lastElementIndex].@#identifier = instance.blockColorsList[i].id;
        container[lastElementIndex].@#active = instance.blockColorsList[i].active;
        container[lastElementIndex].style#background-color = color(instance.blockColorsList[i].color);      
        const colorValueAreaHTML = "<input .colorValueArea value="+instance.blockColorsList[i].color+">";
        const colorValueAreaSequenceNumber = 1;
        container[lastElementIndex].insert(colorValueAreaHTML,colorValueAreaSequenceNumber);      
      }
  }

  function addNewColor(colorValue) {
      var isDuplicated = instance.blockColorsList.find(:el: el.color == colorValue); 
      if (!isDuplicated)
      {
        const activeBlock = instance.blockColorsList.find(:el: el .active == true);
        if (activeBlock) activeBlock.active = false;
        instance.blockColorsList.push({
          id: instance.elementCounter, 
          color: colorValue,
          active: true 
        });
        instance.elementCounter++;  
         stdout.$n(elementCounter = ______{instance.elementCounter}_____);     
      }
      removeLayout();
  }

  function fillPreview(previewColor){
    const preview = $(#preview);
    preview.style#background-color = color(previewColor);
  }

  function removeLayout(){
    $(#preview).remove();
    $(#colorsContainer).remove();
  }

  function removeBlockByID(colorBlockID){
    instance.blockColorsList = instance.blockColorsList.filter(:el: el.id != colorBlockID);
    var colorBlock = getBlockByID(colorBlockID);
		colorBlock.remove();
  }

  function showBlocksArray(){
    for ( var item in instance.blockColorsList) {
      stdout.$n( item = {item.color});
    } 
  }

  function clearBlockList(){
    instance.blockColorsList = [];
  }

    function getBlockByID(id){
        const colorBlocks = $$(.colorBlock);
        for (var block in colorBlocks)
        { 
            if (block.@#identifier == id){
                return block;
            }
        }
    }

    function changePreviewByID(colorBlockID){
        disactivateActiveBlock();
        setColorBlockActive(colorBlockID);
        const activeBlock = getBlockByID(colorBlockID);
        self.postEvent("colorChanged", {color : activeBlock.style#background-color});
    }

    function changePreviewColor(block){
		  disactivateActiveBlock();
		  for (var i = 0; i< instance.blockColorsList.length; i++)
		  {
		    if (instance.blockColorsList[i].id == block.@#identifier)
		    { 
			    instance.blockColorsList[i].active = true;
			    block.@#active = true;
			    break;
		    } 
		  }
		  instance.fillPreview(block.style#background-color);
    }

  function disactivateActiveBlock(){
  		var list = instance.blockColorsList;
		const colorBlocks = $$(.colorBlock);
		for (var i = 0; i< list.length; i++)
    {
      if (list[i].active == true)
		  {
			  list[i].active = false;
			  colorBlocks[i].@#active = undefined;
			  break;
		  } 
    }    
  }

  function setColorBlockActive(colorBlockID){
    const wantedBlock = getBlockByID(colorBlockID);
    for (var i = 0; i< instance.blockColorsList.length; i++){
		  if (instance.blockColorsList[i].id == wantedBlock.@#identifier)
		  {
			  instance.blockColorsList[i].active = true;
			  wantedBlock.@#active = true;
			  break;
		  }
	  }
  }

  function getColorByID(id){
        var wantedBlock = instance.blockColorsList.find(function(currentBlock){
        return (currentBlock.id == id);
      });
      return wantedBlock.color;
  }
}