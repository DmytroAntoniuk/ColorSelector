// function self.ready() {
//     stdout.$n(____________________START_________);
//     var obj = new DataStorage();
//     var container = $(#colorsContainer);
//     obj.addData($(widget#color).value.toString(), container[container.length - 1]);
// };

class HSVSelector: Element 
          {
            this var hue = 0; // 0..360
            this var val = 0.0; // 0..1.0
            this var sat = 0.0; // 0..1.0

            function attached() {
              var me = this;
              $(div.value) << event mousedown(evt) {
                 var (w,h) = this.box(#dimension);
                 me.val = 1.0 - (evt.y + 0.5) / h.toFloat(); 
                 me.sat = 1.0 - (evt.x + 0.5) / w.toFloat(); 
                 me.postEvent("change");
                 me.$(div.pointer).style.set {
                   margin-left: evt.x,
                   margin-top: evt.y,
                 };
              };
            }

            event change $(input.hue) (evt, elHue) {
              this.hue = elHue.value;
              var color = Color.hsv(this.hue,1,1);
              this.style.variable("hue", color);
              this.postEvent("change");
            }

            property value(v) {
              get return Color.hsv( this.hue, this.sat, this.val );
              set {
              }
            }
          }

// var blockColorsList = [];
// var blocksCounter = 0;


class AddColorBtn : Element
  {
    // var blockMap = new BlockMap();

    function attached(){
      this.onClick = handleClick;
    }

    function handleClick(){
      // blockColorsList.push($(widget#color).value.toString());
      // var currentBlock = "<div .colorBlock><span .closeBtn>&times;</span><input .colorValueArea value="+blockColorsList[blockColorsList.length-1].toString()+"></div>";
      // var container = $(#colorsContainer);
      // container.insert(currentBlock ,container.length - 1);
      // container[container.length - 2].style.set { background-color:  color(blockColorsList[blockColorsList.length-1])};            
      // const colorBlocks = $$(.colorBlock);
      //   for ( var block in colorBlocks){
      //   block.@#active = undefined;
      // }
      // container[container.length - 2].@#active = true;
      LayoutControl.removeLayout();
      var option = "addBlock";
		  LayoutControl.generateLayout(option);
      LayoutControl.fillPreview();
      $(#popupMenu).closePopup();
    }
  }

class LayoutControl
{
    var blockColorsList = [];
    var blockIsActive = [];

    function generateLayout(option){
      if (option == "addBlock") blockColorsList.push($(widget#color).value.toString());
      stdout.$n(_________________{blockColorsList.length}_____);
      $(body).insert("<div #preview></div>",0);
      $(body).insert("<div #colorsContainer></div>",1);
      var container = $(#colorsContainer);
      
      container.insert("<div #noColorBlock><h2>No color</h2></div>",0);
      
      var emptyBlock = "<div .colorBlock><span .closeBtn>&times;</span></div>";
      for ( var i = 0; i < blockColorsList.length ; i++) {
        container.insert(emptyBlock ,container.length);
        container[container.length-1].style#background-color = color(blockColorsList[i]);      
        container[container.length-1].insert("<input .colorValueArea value="+blockColorsList[i].toString()+">",1);      
      }
      container.insert("<div #addColorBlock><h2>Select color</h2></div>",container.length);
      const colorBlocks = $$(.colorBlock);
        for ( var block in colorBlocks){
        block.@#active = undefined;
      }
  }

    function fillPreview(){
      const preview = $(#preview);
      preview.style#background-color = color(blockColorsList[blockColorsList.length-1]);
    }

  function removeLayout(){
    $(#preview).remove();
    $(#colorsContainer).remove();
  }
}
  
  
// class DataStorage
// {
//    var storage;
//    var root;

//     function this() {
//          storage = Storage.open("database.db");
//          root =  initDb();
//          var container = $(#colorsContainer);
//          for (var i = 0; i < container.length; i++) {
//             storage.root.block[i] = container[i];
//           }

//          stdout.$n(____________________ATTACHED_________{storage}____{root});
//     }

//     function initDb() {
//       stdout.$n(____________________INIT_________);
//       storage.root = { 
//         block: storage.createIndex(#object, true);
//       };
//       return storage.root;
//     }

//   function addData(blockObj) {
//       stdout.$n(____________________ADD_DATA___________________________);
//       var container = $(#colorsContainer);
//       storage.root.block[container.length-1] = container[container.length-1];
//   }

//   function showData() {
//     stdout.$n(____________________SHOW_DATA_________);
//       for(obj in storage.root.block);
//       stdout.$n(child.color, child.block);
//   } 
// }


