class HSVSelector: Element 
          {
            this var hue = 0; // 0..360
            this var val = 0.0; // 0..1.0
            this var sat = 0.0; // 0..1.0

            function attached() {
              var me = this;
              $(div.value) << event mousedown(evt) {
                 var (w,h) = this.box(#dimension);
                 me.val = 1.0 - (evt.y + 0.5) / h.toFloat(); 
                 me.sat = 1.0 - (evt.x + 0.5) / w.toFloat(); 
                 me.postEvent("change");
                 me.$(div.pointer).style.set {
                   margin-left: evt.x,
                   margin-top: evt.y,
                 };
              };
            }

            event change $(input.hue) (evt, elHue) {
              this.hue = elHue.value;
              var color = Color.hsv(this.hue,1,1);
              this.style.variable("hue", color);
              this.postEvent("change");
            }

            property value(v) {
              get return Color.hsv( this.hue, this.sat, this.val );
              set {
              }
            }
          }

class AddColorBtn : Element
  {
    function attached(){
      this.onClick = handleClick;
    }

    function handleClick(){

      const addColor = true;
		  LayoutControl.generateLayout(addColor);
      const previewColor = LayoutControl.blockColorsList[LayoutControl.blockColorsList.length-1];
      LayoutControl.fillPreview(previewColor);
      $(#popupMenu).closePopup();
    }
  }

class LayoutControl
{
    var blockColorsList = [];
    var blockIsActive = [];

    function generateLayout(addColor){
      if (addColor == true) 
      {
        blockColorsList.push($(widget#color).value.toString());
        removeLayout();
      }
      $(body).insert("<div #preview></div>",0);
      $(body).insert("<div #colorsContainer></div>",1);
      var container = $(#colorsContainer);
      
      container.insert("<div #noColorBlock><h2>No color</h2></div>",0);
      
      var emptyBlock = "<div .colorBlock><span .closeBtn>&times;</span></div>";
      for ( var i = 0; i < blockColorsList.length ; i++) {
        container.insert(emptyBlock ,container.length);
        container[container.length-1].style#background-color = color(blockColorsList[i]);      
        container[container.length-1].insert("<input .colorValueArea value="+blockColorsList[i].toString()+">",1);      
      }
      container.insert("<div #addColorBlock><h2>Select color</h2></div>",container.length);
      setActiveBlock(container[container.length - 2]);
  }

    function fillPreview(previewColor){
      const preview = $(#preview);
      preview.style#background-color = color(previewColor);
    }

  function removeLayout(){
    $(#preview).remove();
    $(#colorsContainer).remove();
  }

  function removeBlock(colorBlock)
  {
    colorBlock.@#toDelete = true; 
		var container = $(#colorsContainer);
		var i = 0;
		for (i = 0; i < container.length; i++) {
			if (container[i].@#toDelete == true) break;
		}
		LayoutControl.blockColorsList.remove(i-1);
		colorBlock.remove();
  }

  function setActiveBlock(block){
      var container = $(#colorsContainer);
      const colorBlocks = $$(.colorBlock);
        for ( var block in colorBlocks){
        block.@#active = undefined;
      }
      block.@#active = true;
  }
}
