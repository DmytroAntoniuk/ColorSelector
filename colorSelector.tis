class HSVSelector: Element 
{
  this var hue = 0; // 0..360
  this var val = 0.0; // 0..1.0
  this var sat = 0.0; // 0..1.0

  function attached() {
    var me = this;
    $(div.value) << event mousedown(evt) {
      var (w,h) = this.box(#dimension);
      me.val = 1.0 - (evt.y + 0.5) / h.toFloat(); 
      me.sat = 1.0 - (evt.x + 0.5) / w.toFloat(); 
      me.postEvent("change");
      me.$(div.pointer).style.set {  
        margin-left: evt.x,
        margin-top: evt.y,
      };
    };
  }

  event change $(input.hue) (evt, elHue) {
    this.hue = elHue.value;
    var color = Color.hsv(this.hue,1,1);
    this.style.variable("hue", color);
    this.postEvent("change");
  }

  property value(v) {
    get return Color.hsv( this.hue, this.sat, this.val );
    set {}
  }
}

class AddColorBtn : Element
  {
    function attached(){
      this.onClick = handleClick;
    }

    function handleClick(){

      const needToAddColor = true;
		  LayoutControl.generateLayout(needToAddColor);
      const previewColor = LayoutControl.blockColorsList[LayoutControl.blockColorsList.length-1].color;
      LayoutControl.fillPreview(previewColor);
      $(#popupMenu).closePopup();
    }
  }

class LayoutControl
{
    var blockColorsList = [];
    var elementCounter = 0;

    function generateLayout(needToAddColor){
      addNewColor(needToAddColor);
      generateBlocks();
  }

  function generateBlocks()
  {
    $(body).insert("<div #fileMenu></div>",0);
    $(#fileMenu).insert("<button #openFileBtn>Open file</button>",0);
    $(#fileMenu).insert("<br><button #saveFileBtn>Save file</button>",1);
    $(body).insert("<div #preview></div>",1);
    $(body).insert("<div #colorsContainer></div>",2);
    var container = $(#colorsContainer);
    container.insert("<div #noColorBlock><h2>No color</h2></div>",0);
    generateColorBlocks(container);
    container.insert("<div #addColorBlock><h2>Select color</h2></div>",container.length);
  }

  function generateColorBlocks(container)
  {
    var emptyBlock = "<div .colorBlock><div .closeBtn>&times;</div></div>";
    for ( var i = 0; i < blockColorsList.length ; i++) {
        container.insert(emptyBlock ,container.length);
        container[container.length-1].@#identifier = blockColorsList[i].id;
        container[container.length-1].@#active = blockColorsList[i].active;
        container[container.length-1].style#background-color = color(blockColorsList[i].color);      
        container[container.length-1].insert("<input .colorValueArea value="+blockColorsList[i].color+">",1);      
      }
  }

  function addNewColor(needToAddColor) {
    if (needToAddColor == true) 
    {
      const colorValue = $(widget#color).value.toString();
      var isDuplicated = blockColorsList.find(:el: el.color == colorValue); 
      if (!isDuplicated)
      {
        for (var block in blockColorsList)
        {
          if (block.active == true) block.active = false;
        }
        blockColorsList.push({
          id: elementCounter, 
          color: colorValue,
          active: true 
        });
        elementCounter++;       
      }
      removeLayout();
    }
  }

  function fillPreview(previewColor){
    const preview = $(#preview);
    preview.style#background-color = color(previewColor);
  }

  function removeLayout(){
    $(#fileMenu).remove();
    $(#preview).remove();
    $(#colorsContainer).remove();
  }

  function removeBlock(colorBlock)
  {
    colorBlock.@#toDelete = true; 
		var container = $(#colorsContainer);
		var i = 0;
		for (i = 0; i < container.length; i++) {
			if (container[i].@#toDelete == true) break;
		}
		LayoutControl.blockColorsList.remove(i-1);
		colorBlock.remove();
  }

  function setActiveBlock(block){
      // const colorBlocks = $$(.colorBlock);
      // for ( var block in colorBlocks){
      //   block.@#active = undefined;
      // }

      // var activeListItem = blockColorsList.find(:el: el.active == true);
      // stdout.$n(_____________{activeListItem.color}_____{activeListItem.id}____BEFORE_____);
      // var i = 0;
      // if (activeListItem != undefined)
      // {
      //   stdout.$n(_________ACTIVE_________);
      //   const colorBlocks = $$(.colorBlock);
      //   colorBlocks[activeListItem.id].@#active = undefined; 
      //   blockColorsList[activeListItem.id].active = false;
      //   stdout.$n(___________{blockColorsList[activeListItem.id].id});
      //   block.@#active = true;
      //   while (colorBlocks[i].@#active != true)
      //   {
      //     i++;
      //   }
      //   blockColorsList[i].active = true;
      // }
      // stdout.$n(_____________{blockColorsList[i].color}____{blockColorsList[i].id}_____{i}____AFTER____);


       var container = $(#colorsContainer);
      const colorBlocks = $$(.colorBlock);
        for ( var block in colorBlocks){
        block.@#active = undefined;
      }
      block.@#active = true;
  }

  function clearBlockList(){
    blockColorsList = [];
  }

  function changePreviewColor(block){
    stdout.$n(______________________);
		var list = LayoutControl.blockColorsList;
		const colorBlocks = $$(.colorBlock);
		for (var i = 0; i< list.length; i++)
        {
			stdout.$n(list[i].active = {list[i].active});
			stdout.$n(colorBlocks[i].@#active = {colorBlocks[i].@#active});
          if (list[i].active == true)
		  {
			list[i].active = false;
			colorBlocks[i].@#active = undefined;
			break;
		  } 
		  
        }

		for (var i = 0; i< list.length; i++)
		{
		  stdout.$n(list[i].id = {list[i].id});
		  stdout.$n(block.@#identifier = {block.@#identifier});
		  if (list[i].id == block.@#identifier)
		  {
			  list[i].active = true;
			  block.@#active = true;
			  break;
		  }
		}
		// LayoutControl.removeLayout();
		// LayoutControl.generateBlocks();
		LayoutControl.fillPreview(block.style#background-color);
  }
}